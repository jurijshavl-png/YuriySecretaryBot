import os
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –¥–ª—è Render
import logging
import datetime
import pytz
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.getenv("TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_vilnius_time():
    tz = pytz.timezone("Europe/Vilnius")
    now = datetime.datetime.now(tz)
    return now.strftime("%Y-%m-%d %H:%M:%S")

def get_mock_economics():
    return {
        "eur_usd": "1.0872 (‚Üë)",
        "gold": "1964.30 $/oz (‚Üì)",
        "silver": "23.12 $/oz (‚Üë)"
    }

def get_mock_weather():
    return {
        "wind": "6.3 –º/—Å SE",
        "pressure": "1012 hPa (‚Üò –ø–∞–¥–∞–µ—Ç)",
        "temperature": "+18¬∞C"
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_now = get_vilnius_time()
    eco = get_mock_economics()
    weather = get_mock_weather()

    message = f"""‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
üïí –í—Ä–µ–º—è (–í–∏–ª—å–Ω—é—Å): {time_now}

üí± –≠–∫–æ–Ω–æ–º–∏–∫–∞:
EUR/USD: {eco['eur_usd']}
–ó–æ–ª–æ—Ç–æ: {eco['gold']}
–°–µ—Ä–µ–±—Ä–æ: {eco['silver']}

üå¶ –ü–æ–≥–æ–¥–∞:
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}
–í–µ—Ç–µ—Ä: {weather['wind']}
–î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']}
"""
    await update.message.reply_text(message)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.run_polling()

if __name__ == "__main__":
    main()
